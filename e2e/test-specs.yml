description: |
  End-to-end tests for k8s integration

custom_test_key: k8s.clusterName

scenarios:
  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected.
    before:
      - helm dependency update ../charts/internal/e2e-resources
      - helm dependency update ../charts/newrelic-infrastructure
      - function ver { printf $((10#$(printf "%03d%03d" $(echo "$1" | tr '.' ' ')))); } && K8S_VERSION=$(kubectl version 2>&1 | grep 'Server Version' | awk -F' v' '{ print $2; }' | awk -F. '{ print $1"."$2; }') && if [[ $(ver $K8S_VERSION) -gt $(ver "1.22") ]]; then KSM_IMAGE_VERSION="v2.10.0"; else KSM_IMAGE_VERSION="v2.6.0"; fi && echo "Will use KSM image version ${KSM_IMAGE_VERSION}" && helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ../charts/internal/e2e-resources --set persistentVolume.enabled=true --set kube-state-metrics.image.tag=${KSM_IMAGE_VERSION}
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ../charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG}
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls:
#         START Cronjob
        - query: FROM Metric SELECT filter(uniqueCount(k8s.jobName), where k8s.job.isComplete is not null) AS 'Completed Jobs' WHERE namespaceName = 'nr-${SCENARIO_TAG}' AND jobName LIKE '${SCENARIO_TAG}-resources-cronjob-%' LIMIT MAX
          expected_results:
            - key: "Completed Jobs"
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(uniqueCount(k8s.jobName), where k8s.job.failed is not null) AS 'Failed Jobs' WHERE namespaceName = 'nr-${SCENARIO_TAG}' AND jobName LIKE '${SCENARIO_TAG}-resources-cronjob-%' LIMIT MAX
          expected_results:
            - key: "Failed Jobs"
              value: 0
        - query: FROM Metric SELECT latest(k8s.cronjob.isActive) as 'Active Jobs' WHERE metricName = 'k8s.cronjob.createdAt'
          expected_results:
            - key: "Active Jobs"
              lowerBoundedValue: 0
        - query: FROM Metric SELECT if(latest(k8s.cronjob.isSuspended) = 1, 'True', 'False') as 'Suspended' WHERE metricName = 'k8s.cronjob.createdAt'
          expected_results:
            - key: "constant"
              value: False
        - query: FROM Metric SELECT max(k8s.pod.netTxBytesPerSecond) / 1000 AS 'Transferred (KBps)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Transferred (KBps)"
              lowerBoundedValue: 0.00  # this metric is flaky - sometimes it's 0 and sometimes it's more
        - query: FROM Metric SELECT max(k8s.pod.netRxBytesPerSecond) / 1000 AS 'Received (KBps)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Received (KBps)"
              value: 0
        - query: FROM Metric SELECT max(k8s.pod.netErrorsPerSecond) AS 'Errors (per second)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Errors (per second)"
              value: 0
        - query: FROM Metric SELECT average(k8s.container.cpuUsedCores) AS 'CPU usage (cores)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU usage (cores)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT average(k8s.container.cpuCoresUtilization) / 100 AS 'CPU utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU utilization (%)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT sum(k8s.container.cpuCfsThrottledPeriodsDelta) / sum(k8s.container.cpuCfsPeriodsDelta) AS 'CPU throttling (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU throttling (%)"
              lowerBoundedValue: 0.0  # this metric is flaky - sometimes it's 0 and sometimes it's more
        - query: FROM Metric SELECT average(k8s.container.memoryWorkingSetBytes) AS 'Memory usage (bytes)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Memory usage (bytes)"
              lowerBoundedValue: 0.5
        - query: FROM Metric SELECT average(k8s.container.memoryWorkingSetUtilization) / 100 AS 'Memory utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Memory utilization (%)"
              lowerBoundedValue: 0.1
        - query: FROM Metric SELECT max(k8s.container.fsUsedBytes) AS 'Filesystem used (bytes)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Filesystem used (bytes)"
              lowerBoundedValue: 9000
        - query: FROM Metric SELECT max(k8s.container.fsUsedPercent) / 100 AS 'Filesystem Utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Filesystem Utilization (%)"
              lowerBoundedValue: 0.0000001
        - query: SELECT sum(k8s.container.restartCountDelta) AS 'Container restarts' FROM Metric WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Container restarts"
              value: 0
#        END Cronjob
      entities: []
      metrics:
        - source: "k8s.yml"
          # EXCEPTIONS_SOURCE_FILE contains the path to the exceptions according to the k8s version.
          # These exceptions files live in '/e2e' path and are selected on the GH e2e workflow.
          exceptions_source: ${EXCEPTIONS_SOURCE_FILE}
          except_entities: []
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*

            - k8s.controllermanager.leaderElectionMasterStatus

            - k8s.scheduler.leaderElectionMasterStatus
            - k8s.scheduler.podPreemptionVictims
            - k8s.scheduler.preemptionAttemptsDelta
            - k8s.scheduler.schedulingDurationSeconds_*

            # Network metrics are flaky and sometimes fail
            - k8s.pod.netErrorsPerSecond
            - k8s.pod.netRxBytesPerSecond
            - k8s.pod.netTxBytesPerSecond

            # this metric does not appear when the scaler is not limited.
            - k8s.hpa.isLimited

            # Labels are attributes, not metrics. This erroneous metric has been removed
            - k8s.hpa.labels

            # etcd_object_counts was deprecated in k8s 1.22 and removed in 1.23 (replaced by apiserver_storage_objects)
            - k8s.apiserver.etcd.objectCount_*

  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected without privileges.
    before:
      - helm dependency update ../charts/internal/e2e-resources
      - helm dependency update ../charts/newrelic-infrastructure
      - function ver { printf $((10#$(printf "%03d%03d" $(echo "$1" | tr '.' ' ')))); } && K8S_VERSION=$(kubectl version 2>&1 | grep 'Server Version' | awk -F' v' '{ print $2; }' | awk -F. '{ print $1"."$2; }') && if [[ $(ver $K8S_VERSION) -gt $(ver "1.22") ]]; then KSM_IMAGE_VERSION="v2.10.0"; else KSM_IMAGE_VERSION="v2.6.0"; fi && echo "Will use KSM image version ${KSM_IMAGE_VERSION}" && helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ../charts/internal/e2e-resources --set persistentVolume.enabled=true --set kube-state-metrics.image.tag=${KSM_IMAGE_VERSION}
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ../charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG} --set privileged=false
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls:
#         START Cronjob
        - query: FROM Metric SELECT filter(uniqueCount(k8s.jobName), where k8s.job.isComplete is not null) AS 'Completed Jobs' WHERE namespaceName = 'nr-${SCENARIO_TAG}' AND jobName LIKE '${SCENARIO_TAG}-resources-cronjob-%' LIMIT MAX
          expected_results:
            - key: "Completed Jobs"
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(uniqueCount(k8s.jobName), where k8s.job.failed is not null) AS 'Failed Jobs' WHERE namespaceName = 'nr-${SCENARIO_TAG}' AND jobName LIKE '${SCENARIO_TAG}-resources-cronjob-%' LIMIT MAX
          expected_results:
            - key: "Failed Jobs"
              value: 0
        - query: FROM Metric SELECT latest(k8s.cronjob.isActive) as 'Active Jobs' WHERE metricName = 'k8s.cronjob.createdAt'
          expected_results:
            - key: "Active Jobs"
              lowerBoundedValue: 0
        - query: FROM Metric SELECT if(latest(k8s.cronjob.isSuspended) = 1, 'True', 'False') as 'Suspended' WHERE metricName = 'k8s.cronjob.createdAt'
          expected_results:
            - key: "constant"
              value: False
        - query: FROM Metric SELECT max(k8s.pod.netTxBytesPerSecond) / 1000 AS 'Transferred (KBps)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Transferred (KBps)"
              lowerBoundedValue: 0.00 # this metric is flaky - sometimes it's 0 and sometimes it's more
        - query: FROM Metric SELECT max(k8s.pod.netRxBytesPerSecond) / 1000 AS 'Received (KBps)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Received (KBps)"
              value: 0
        - query: FROM Metric SELECT max(k8s.pod.netErrorsPerSecond) AS 'Errors (per second)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Errors (per second)"
              value: 0
        - query: FROM Metric SELECT average(k8s.container.cpuUsedCores) AS 'CPU usage (cores)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU usage (cores)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT average(k8s.container.cpuCoresUtilization) / 100 AS 'CPU utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU utilization (%)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT sum(k8s.container.cpuCfsThrottledPeriodsDelta) / sum(k8s.container.cpuCfsPeriodsDelta) AS 'CPU throttling (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "CPU throttling (%)"
              lowerBoundedValue: 0.0  # this metric is flaky - sometimes it's 0 and sometimes it's more
        - query: FROM Metric SELECT average(k8s.container.memoryWorkingSetBytes) AS 'Memory usage (bytes)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Memory usage (bytes)"
              lowerBoundedValue: 0.5
        - query: FROM Metric SELECT average(k8s.container.memoryWorkingSetUtilization) / 100 AS 'Memory utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Memory utilization (%)"
              lowerBoundedValue: 0.1
        - query: FROM Metric SELECT max(k8s.container.fsUsedBytes) AS 'Filesystem used (bytes)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Filesystem used (bytes)"
              lowerBoundedValue: 9000
        - query: FROM Metric SELECT max(k8s.container.fsUsedPercent) / 100 AS 'Filesystem Utilization (%)' WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Filesystem Utilization (%)"
              lowerBoundedValue: 0.0000001
        - query: SELECT sum(k8s.container.restartCountDelta) AS 'Container restarts' FROM Metric WHERE k8s.podName like '${SCENARIO_TAG}-resources-cronjob-%' AND k8s.namespaceName = 'nr-${SCENARIO_TAG}'
          expected_results:
            - key: "Container restarts"
              value: 0
#        END Cronjob
      entities: []
      metrics:
        - source: "k8s.yml"
          exceptions_source: ${EXCEPTIONS_SOURCE_FILE}
          except_entities:
            - K8sCluster # all metrics are related to controlPlane
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*
            
            # Network metrics are flaky and sometimes fail
            - k8s.pod.netErrorsPerSecond
            - k8s.pod.netRxBytesPerSecond
            - k8s.pod.netTxBytesPerSecond

            - k8s.hpa.isLimited

            # Labels are attributes, not metrics. This erroneous metric has been removed
            - k8s.hpa.labels
