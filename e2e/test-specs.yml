description: |
  End-to-end tests for k8s integration

custom_test_key: k8s.clusterName

scenarios:
  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected.
    before:
      - helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ./charts/e2e-resources --set persistentVolume.enabled=true
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ./charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG}
    after:
      - kubectl logs -l app=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls: []
      entities: []
      metrics:
        - source: "k8s.yml"
          except_entities: []
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*

            - k8s.controllermanager.leaderElectionMasterStatus

            - k8s.etcd.mvccDbTotalSizeInBytes
            - k8s.etcd.networkClientGrpcReceivedBytesRate
            - k8s.etcd.networkClientGrpcSentBytesRate
            - k8s.etcd.serverHasLeader
            - k8s.etcd.serverLeaderChangesSeenDelta
            - k8s.etcd.serverProposalsAppliedDelta
            - k8s.etcd.serverProposalsAppliedRate
            - k8s.etcd.serverProposalsCommittedDelta
            - k8s.etcd.serverProposalsCommittedRate
            - k8s.etcd.serverProposalsFailedDelta
            - k8s.etcd.serverProposalsFailedRate
            - k8s.etcd.serverProposalsPending
            - k8s.etcd.goGoroutines
            - k8s.etcd.goThreads
            - k8s.etcd.process.cpuSecondsDelta
            - k8s.etcd.process.maxFds
            - k8s.etcd.process.openFds
            - k8s.etcd.process.residentMemoryBytes
            - k8s.etcd.process.processFdsUtilization

            - k8s.scheduler.leaderElectionMasterStatus
            - k8s.scheduler.podPreemptionVictims
            - k8s.scheduler.preemptionAttemptsDelta
            - k8s.scheduler.schedulingDurationSeconds_*
  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected without privileges.
    before:
      - helm upgrade --install ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG} --create-namespace ./charts/e2e-resources --set persistentVolume.enabled=true
      - helm upgrade --install ${SCENARIO_TAG} -n nr-${SCENARIO_TAG} --create-namespace ./charts/newrelic-infrastructure --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG} --set privileged=false
    after:
      - kubectl logs -l app=newrelic-infrastructure -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources -n nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} -n nr-${SCENARIO_TAG}
    tests:
      nrqls: []
      entities: []
      metrics:
        - source: "k8s.yml"
          except_entities:
            - K8sCluster # all metrics are related to controlPlane
          except_metrics:
            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*
