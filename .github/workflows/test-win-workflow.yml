name: Testing Reusable Release pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: Name of the repo
        type: string
        required: true
      artifact_path:
        description: The artifact path
        type: string
        required: false
      enable_helm_chart_release:
        description: Whether the release workflow should trigger a helm chart release or not
        type: boolean
        required: false
        default: true
      docker_image_name:
        description: Docker image name
        type: string
        required: true
      chart_directory:
        description: Location of Chart
        type: string
        required: true
      # Usually key is .appVersion
      image_name_key:
        description: Image name key in chart
        type: string
        required: false
        default: .appVersion
      enable_windows:
        description: Whether to enable windows build or not
        type: boolean
        required: false
        default: false
      z_pre_release:
        description: Whether the release is a pre-release or not, override for testing
        type: boolean
        required: true
        default: true
      z_tag_name:
        description: The tag name override for github.event.release.tag_name
        type: string
        required: false
        default: v0.0.0
    # secrets need to be passed in for reusable workflows
    secrets:
      dockerhub_username:
        description: dockerhub username
        required: true
      dockerhub_token:
        description: dockerhub token
        required: true
      bot_token:
        description: team specific bot token
        required: true
      slack_channel: 
        description: slack channel for notifications
        required: true
      slack_token: 
        description: slack token for slack channel
        required: true

env:
  ORIGINAL_REPO_NAME: ${{ github.event.repository.full_name }}

jobs:
  build:
    name: Build integration for
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64, arm ]
    steps:
      - name: Build env args
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DATE=`date`" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'
      - name: Build integration
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          COMMIT: ${{ github.sha }}
          DATE: ${{ env.DATE }}
          TAG: ${{ env.DOCKER_IMAGE_TAG }}
        run: |
          make compile
      - name: Upload artifact for docker build step
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ inputs.repo_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ inputs.artifact_path }}${{ inputs.repo_name }}-${{ matrix.goos }}-${{ matrix.goarch }}

  docker-integration:
    name: Release docker
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.set-new-version.outputs.new-version }}
    env:
      DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64,linux/arm" # Must be consistent with the matrix from the job above
      COMMIT: ${{ github.sha }}
      Z_PRELEASE: ${{ inputs.z_pre_release }}
      Z_TAG_NAME: ${{ inputs.z_tag_name }}
    steps:
      - name: Generate docker image version from git tag
        id: set-new-version
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DATE=`date`" >> $GITHUB_ENV
          echo "new-version=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download all artifacts from build job with bin path
        if: ${{ inputs.artifact_path }} 
        uses: actions/download-artifact@v4
        with:
          path: bin
      - name: Download all artifacts from build job without bin path
        if: ${{ ! inputs.artifact_path }} 
        uses: actions/download-artifact@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}
      - name: List files
        run: ls -la
      - name: Build and push docker prerelease image
        if: ${{ inputs.z_pre_release }}
        run: |
          DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}-pre-linux-multi
          docker buildx build --push --platform=$DOCKER_PLATFORMS \
            --build-arg "COMMIT=$COMMIT" \
            --build-arg "DATE=$DATE" \
            --build-arg "TAG=$DOCKER_IMAGE_TAG" \
            -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
            .
      - name: Build and push docker release image
        if: ${{ ! inputs.z_pre_release }}
        run: |
          docker buildx build --push --platform=$DOCKER_PLATFORMS \
            --build-arg "COMMIT=$COMMIT" \
            --build-arg "DATE=$DATE" \
            --build-arg "TAG=$DOCKER_IMAGE_TAG" \
            -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
            -t $DOCKER_IMAGE_NAME:latest \
            .

  # This job is only run if the input enable_windows is set to true 
  build-windows:
    name: Build Windows integration for
    strategy:
      fail-fast: true
      matrix:
        windows:
          # Here we specify the GH runner where the image will be built.
          # Tag must exist in both https://hub.docker.com/_/microsoft-windows-servercore and
          # https://hub.docker.com/_/microsoft-windows-nanoserver, and must be matched with the runner.
          # In theory, newer versions could build old images using --isolation=hyperv, but unfortunately hyperv is not
          # enabled in GHA.
          - runner: windows-2019
            tag: ltsc2019
          - runner: windows-2022
            tag: ltsc2022
    runs-on: ${{ matrix.windows.runner }}
    steps:
      - name: Build env args
        shell: powershell
        run: |
              zTagName = ${{ inputs.z_tag_name}}
              if ("$zTagName" -notmatch '^[v]?[0-9.]*[0-9]$') {
                throw "Tag name does not match expected pattern"
              }
              $DOCKER_IMAGE_TAG = "$zTagName" -replace '^v',''
              echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $env:GITHUB_ENV
              echo "DATE=$(Get-Date)" >> $env:GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build integration
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: amd64
          COMMIT: ${{ github.sha }}
          DATE: ${{ env.DATE }}
          TAG: ${{ env.DOCKER_IMAGE_TAG }}
        shell: powershell
        run: | 
          $env:COMMIT = "${{ github.sha }}"
          $env:DATE = "${{ env.DATE }}"
          $env:TAG = "${{ env.DOCKER_IMAGE_TAG }}"
          $env:WinVersion = "${{ matrix.windows.tag }}"
          ./buildWindows.ps1
      - name: Upload artifact for docker build step
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ inputs.repo_name }}-windows-${{ matrix.windows.tag }}-amd64
          path: ${{ inputs.artifact_path }}${{ inputs.repo_name }}-windows-${{ matrix.windows.tag }}-amd64
  
  docker-integration-windows:
    name: Release docker
    needs: [ build-windows ]
    strategy:
      fail-fast: true
      matrix:
        windows:
          - runner: windows-2019
            tag: ltsc2019
          - runner: windows-2022
            tag: ltsc2022
    runs-on: ${{ matrix.windows.runner }}
    outputs:
      new-version: ${{ steps.set-new-version.outputs.new-version }}
    env:
      DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
      DOCKER_PLATFORMS: "windows/amd64" # Must be consistent with the matrix from the job above
      COMMIT: ${{ github.sha }}
    steps:
      - name: Generate docker image version from git tag
        id: set-new-version
        run: |
          zTagName = ${{ inputs.z_tag_name}}
          if ("$zTagName" -match '^[v]?[0-9.]*[0-9]$') {
              $DOCKER_IMAGE_TAG = "$zTagName" -replace '^v', ''
              "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
              "DATE=$(Get-Date)" | Out-File -FilePath $env:GITHUB_ENV -Append
              "new-version=$DOCKER_IMAGE_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
      - name: Download Windows artifacts from build job with bin path
        if: ${{ inputs.artifact_path }}
        uses: actions/download-artifact@v4
        with:
          name: '*-windows-*'
          path: bin
      - name: Download Windows artifacts from build job without bin path
        if: ${{ ! inputs.artifact_path }}
        uses: actions/download-artifact@v4
        with:
          name: '*-windows-*'
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}
      - name: List files
        shell: powershell
        run: Get-ChildItem -Force
      - name: Build and push windows docker prerelease image
        if: ${{ inputs.z_pre_release }}
        shell: powershell
        run: |
          $matrixTag = "${{ matrix.windows.tag }}"
          $date = "${{ env.DATE }}"
          $commit = "${{ env.COMMIT }}"
          $dockerImageName = "${{ env.DOCKER_IMAGE_NAME}}"
          $dockerImageTag = "test-${{ env.DOCKER_IMAGE_TAG}}"

          docker build --push --platform windows/amd64 -f Dockerfile.windows `
            --build-arg BASE_IMAGE_TAG=$matrixTag `
            --build-arg "COMMIT=$commit" `
            --build-arg "DATE=$date" `
            --build-arg "TAG=$dockerImageTag" `
              -t $dockerImageName:$dockerImageTag-windows-$matrixTag . `

      - name: Build and push winodws docker release image
        if: ${{ ! inputs.z_pre_release }}
        shell: powershell
        run: |
          $matrixTag = "${{ matrix.windows.tag }}"
          $date = "${{ env.DATE }}"
          $commit = "${{ env.COMMIT }}"
          $dockerImageName = "${{ env.DOCKER_IMAGE_NAME}}"
          $dockerImageTag = "test-${{ env.DOCKER_IMAGE_TAG}}"

          docker build --push --platform windows/amd64 -f Dockerfile.windows `
            --build-arg BASE_IMAGE_TAG=$matrixTag `
            --build-arg "COMMIT=$commit" `
            --build-arg "DATE=$date" `
            --build-arg "TAG=$dockerImageTag" `
              -t $dockerImageName:$dockerImageTag-windows-$matrixTag . `
  create-multi-platform-arch:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [docker-integration, docker-integration-windows]
    steps:
      - name: Build env args
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DATE=`date`" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'
      - name: Build integration
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          COMMIT: ${{ github.sha }}
          DATE: ${{ env.DATE }}
          TAG: ${{ env.DOCKER_IMAGE_TAG }}
        run: |
          make compile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create and Push Manifest
        run: |
          # Pull the multi-arch Linux image to extract SHA256 digests
          docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-pre-linux-multi
          
          # Extract SHA256 digest for arm64 variant
          arm64_image=$(docker inspect --format='{{range .RepoDigests}}{{if contains "arm64" .}}{{.}}{{end}}{{end}}' $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-pre-linux-multi)
          if [ -z "$arm64_image" ]; then
            # Alternative extraction if the above doesn't find it
            arm64_image=$(docker manifest inspect $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-pre-linux-multi | jq -r '.manifests[] | select(.platform.architecture=="arm64") | "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-" + .digest')
          fi
          
          # Extract SHA256 digest for amd64 variant
          amd64_image=$(docker inspect --format='{{range .RepoDigests}}{{if contains "amd64" .}}{{.}}{{end}}{{end}}' $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-pre-linux-multi)
          if [ -z "$amd64_image" ]; then
            # Alternative extraction if the above doesn't find it
            amd64_image=$(docker manifest inspect $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-pre-linux-multi | jq -r '.manifests[] | select(.platform.architecture=="amd64") | "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-" + .digest')
          fi
          
          # Define Windows image references
          windows2019_image="$DOCKER_IMAGE_NAME:test-$DOCKER_IMAGE_TAG-windows-ltsc2019"
          windows2022_image="$DOCKER_IMAGE_NAME:test-$DOCKER_IMAGE_TAG-windows-ltsc2022"
          
          echo "Linux ARM64 image: ${arm64_image}"
          echo "Linux AMD64 image: ${amd64_image}"
          echo "Windows 2019 image: ${windows2019_image}"
          echo "Windows 2022 image: ${windows2022_image}"
          
          # Create the manifest
          docker manifest create $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-myLatest \
            --amend "${arm64_image}" \
            --amend "${amd64_image}" \
            --amend "${windows2019_image}" \
            --amend "${windows2022_image}"
          
          # Annotate Windows images with correct metadata
          docker manifest annotate $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-myLatest \
            "${windows2019_image}" \
            --os windows --arch amd64 --os-version 10.0.17763
          
          docker manifest annotate $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-myLatest \
            "${windows2022_image}" \
            --os windows --arch amd64 --os-version 10.0.20348
          
          # Push the manifest
          docker manifest push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG-myLatest
          
          echo "Multi-architecture manifest created and pushed successfully!"
