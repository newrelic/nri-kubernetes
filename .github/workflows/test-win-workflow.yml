name: Testing Reusable Release pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: Name of the repo
        type: string
        required: true
      artifact_path:
        description: The artifact path
        type: string
        required: false
      enable_helm_chart_release:
        description: Whether the release workflow should trigger a helm chart release or not
        type: boolean
        required: false
        default: true
      docker_image_name:
        description: Docker image name
        type: string
        required: true
      chart_directory:
        description: Location of Chart
        type: string
        required: true
      # Usually key is .appVersion
      image_name_key:
        description: Image name key in chart
        type: string
        required: false
        default: .appVersion
      enable_windows:
        description: Whether to enable windows build or not
        type: boolean
        required: false
        default: false
      z_pre_release:
        description: Whether the release is a pre-release or not, override for testing
        type: boolean
        required: false
        default: false
      z_tag_name:
        description: The tag name override for github.event.release.tag_name
        type: string
        required: false
        default: v0.0.0
      z_build_linux:
        description: Whether to build linux image or not
        type: boolean
        required: false
        default: false
      windows_directory:
        description: Location of Windows build files
        type: string
        required: false
        default: ''
    # secrets need to be passed in for reusable workflows
    secrets:
      dockerhub_username:
        description: dockerhub username
        required: true
      dockerhub_token:
        description: dockerhub token
        required: true
      bot_token:
        description: team specific bot token
        required: true
      slack_channel: 
        description: slack channel for notifications
        required: true
      slack_token: 
        description: slack token for slack channel
        required: true

env:
  ORIGINAL_REPO_NAME: ${{ github.event.repository.full_name }}

jobs:
  build-env-args:
    name: Build env args
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.build-env-args.outputs.new-version }}
      docker_image_tag: ${{ steps.build-env-args.outputs.docker-image-tag }}
      date: ${{ steps.build-env-args.outputs.date }}
    steps:
      - name: Build env args
        id: build-env-args
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "docker-image-tag=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "DATE=`date`" >> $GITHUB_OUTPUT
          echo "new-version=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
  build:
    name: Build integration for
    runs-on: ubuntu-latest
    if: ${{ inputs.z_build_linux }}
    strategy:
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64, arm ]
    steps:
      - name: Build env args
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DATE=`date`" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'
      - name: Build integration
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          COMMIT: ${{ github.sha }}
          DATE: ${{ env.DATE }}
          TAG: ${{ env.DOCKER_IMAGE_TAG }}
        run: |
          make compile
      - name: Upload artifact for docker build step
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ inputs.repo_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ inputs.artifact_path }}${{ inputs.repo_name }}-${{ matrix.goos }}-${{ matrix.goarch }}

  docker-integration:
    name: Release docker
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.set-new-version.outputs.new-version }}
    env:
      DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64,linux/arm" # Must be consistent with the matrix from the job above
      COMMIT: ${{ github.sha }}
      Z_PRELEASE: ${{ inputs.z_pre_release }}
      Z_TAG_NAME: ${{ inputs.z_tag_name }}
    steps:
      - name: Generate docker image version from git tag
        id: set-new-version
        run: |
          echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
          DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DATE=`date`" >> $GITHUB_ENV
          echo "new-version=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download all artifacts from build job with bin path
        if: ${{ inputs.artifact_path }} 
        uses: actions/download-artifact@v4
        with:
          path: bin
      - name: Download all artifacts from build job without bin path
        if: ${{ ! inputs.artifact_path }} 
        uses: actions/download-artifact@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}
      - name: List files
        run: ls -la
      - name: Build and push docker prerelease image
        if: ${{ inputs.z_pre_release }}
        run: |
          DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}-pre
          docker buildx build --push --platform=$DOCKER_PLATFORMS \
            --build-arg "COMMIT=$COMMIT" \
            --build-arg "DATE=$DATE" \
            --build-arg "TAG=$DOCKER_IMAGE_TAG" \
            -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
            .
      - name: Build and push docker release image
        if: ${{ ! inputs.z_pre_release }}
        run: |
          docker buildx build --push --platform=$DOCKER_PLATFORMS \
            --build-arg "COMMIT=$COMMIT" \
            --build-arg "DATE=$DATE" \
            --build-arg "TAG=$DOCKER_IMAGE_TAG" \
            -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
            -t $DOCKER_IMAGE_NAME:latest \
            .

  # This job is only run if the input enable_windows is set to true 
  build-windows:
    name: Build Windows integration for
    needs: [ build-env-args ]
    strategy:
      fail-fast: true
      matrix:
        windows:
          # Tag must exist in both https://hub.docker.com/_/microsoft-windows-servercore and
          # https://hub.docker.com/_/microsoft-windows-nanoserver, and must be matched with the runner.
          - runner: windows-2019
            tag: ltsc2019
          - runner: windows-2022
            tag: ltsc2022
    runs-on: ${{ matrix.windows.runner }}
    if: ${{ inputs.enable_windows }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build integration
        shell: powershell
        env:
          COMMIT: ${{ github.sha }}
          DATE: ${{ needs.build-env-args.outputs.date }}
          TAG: ${{ needs.build-env-args.outputs.docker_image_tag }}
          WIN_VERSION: ${{ matrix.windows.tag }}
          WIN_DIR: ${{ inputs.windows_directory }}
        run: |
          if ([string]::IsNullOrEmpty($env:WIN_DIR)) {
            ./build.ps1
          } else {
            $scriptPath = Join-Path $env:WIN_DIR "build.ps1"
            & $scriptPath
          }
      - name: Upload artifact for docker build step
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ inputs.repo_name }}-windows-${{ matrix.windows.tag }}-amd64
          path: ${{ inputs.artifact_path }}${{ inputs.repo_name }}-windows-${{ matrix.windows.tag }}-amd64.exe
  
  docker-integration-windows:
    name: Release docker
    needs: [ build-env-args, build-windows ]
    strategy:
      fail-fast: true
      matrix:
        windows:
          - runner: windows-2019
            tag: ltsc2019
          - runner: windows-2022
            tag: ltsc2022
    runs-on: ${{ matrix.windows.runner }}
    steps:
      # - name: Generate docker image version from git tag
      #   id: set-new-version
      #   run: |
      #     $zTagName = "${{ inputs.z_tag_name}}"
      #     if ("$zTagName" -match '^[v]?[0-9.]*[0-9]$') {
      #         $DOCKER_IMAGE_TAG = "$zTagName" -replace '^v', ''
      #         "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
      #         "DATE=$(Get-Date)" | Out-File -FilePath $env:GITHUB_ENV -Append
      #         "new-version=$DOCKER_IMAGE_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      #     }
      - uses: actions/checkout@v4
      - name: Download Windows artifacts from build job with bin path
        if: ${{ inputs.artifact_path }}
        uses: actions/download-artifact@v4
        with:
          path: bin
          pattern: '*-windows-*'
          merge-multiple: true
      - name: Download Windows artifacts from build job without bin path
        if: ${{ ! inputs.artifact_path }}
        uses: actions/download-artifact@v4
        with:
          pattern: '*-windows-*'
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}
      - name: List files
        shell: powershell
        run: Get-ChildItem -Force
      - name: List bin 
        shell: powershell
        run: Get-ChildItem -Path bin -Recurse
      - name: Build and push windows docker prerelease image
        if: ${{ inputs.z_pre_release }}
        env:
          NEW_VERSION: ${{ needs.build-env-args.outputs.new-version }}
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          COMMIT: ${{ github.sha }}
          DATE: ${{ needs.build-env-args.outputs.date }}
          MATRIX_TAG: ${{ matrix.windows.tag }}
          PRE_RELEASE_DOCKER_IMAGE_TAG: "${{ needs.build-env-args.outputs.docker_image_tag }}-pre"
          WIN_DIR: ${{ inputs.windows_directory }}
        shell: powershell
        run: |
          $env:FINAL_TAG = "${env:DOCKER_IMAGE_NAME}:${env:PRE_RELEASE_DOCKER_IMAGE_TAG}-windows-${env:MATRIX_TAG}"

          echo $env:PRE_RELEASE_DOCKER_IMAGE_TAG
          echo $env:FINAL_TAG

          if ([string]::IsNullOrEmpty($env:WIN_DIR)) {
            $dockerfilePath = "Dockerfile.windows"
          } else {
            $dockerfilePath = Join-Path $env:WIN_DIR "Dockerfile.windows"
          }

          docker build --platform windows/amd64 -f $dockerfilePath `
            --build-arg "BASE_IMAGE_TAG=${env:MATRIX_TAG}" `
            --build-arg "COMMIT=${env:COMMIT}" `
            --build-arg "DATE=${env:DATE}" `
            --build-arg "TAG=${env:DOCKER_IMAGE_TAG}" `
              -t "${env:FINAL_TAG}" .
          docker push "${env:FINAL_TAG}"
      - name: Build and push winodws docker release image
        if: ${{ ! inputs.z_pre_release }}
        shell: powershell
        run: |
          $matrixTag = "${{ matrix.windows.tag }}"
          $date = "${{ env.DATE }}"
          $commit = "${{ env.COMMIT }}"
          $dockerImageName = "${{ env.DOCKER_IMAGE_NAME}}"
          $dockerImageTag = "test-${{ env.DOCKER_IMAGE_TAG}}"
          $finalTag = "${dockerImageName}:${dockerImageTag}-windows-${matrixTag}"
          docker build --platform windows/amd64 -f Dockerfile.windows `
            --build-arg "BASE_IMAGE_TAG=${matrixTag}" `
            --build-arg "COMMIT=${commit}" `
            --build-arg "DATE=${date}" `
            --build-arg "TAG=${dockerImageTag}" `
              -t "${finalTag}" .
          docker push "${finalTag}"

  create-multi-platform-arch-manifest:
    name: Create Multi-Arch-Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [build-env-args, docker-integration, docker-integration-windows]
    env:
      DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
    steps:
      # - name: Build env args
      #   run: |
      #     echo "${{ inputs.z_tag_name}}" | grep -E '^[v]?[0-9.]*[0-9]$'
      #     DOCKER_IMAGE_TAG=$(echo "${{ inputs.z_tag_name}}" | sed 's/^v//')
      #     echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
      #     echo "DATE=`date`" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install regctl
        run: |
          REGCTL_VERSION=v0.8.3
          curl -L "https://github.com/regclient/regclient/releases/download/${REGCTL_VERSION}/regctl-linux-amd64" > regctl
          chmod 755 regctl
          regctl version
      - name: Create and Push Manifest
        env: 
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          DOCKER_IMAGE_TAG: ${{ needs.build-env-args.outputs.docker_image_tag }}
        run: |
          IMAGE_TAG="${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}-pre" 
          
          if [ "${{ inputs.z_pre_release }}" = "false" ] ; then
            IMAGE_TAG="${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
          fi
          echo "IMAGE_TAG=${IMAGE_TAG}"

          chmod =x ./windows/util/create-manifest.sh
          ./windows/util/create-manifest.sh --docker-image-name ${IMAGE_TAG} --docker-image-tag ${DOCKER_IMAGE_TAG} --is-prelease ${{ inputs.z_pre_release}}
