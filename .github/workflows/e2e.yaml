name: E2E over minikube

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  e2eTests:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        ## we could run priviledgedMode this in serie instead of in //
        ## PRO less total time, less expensive CONTRA slower to get results
        privilegedMode: [ "normal", "unprivileged" ]
        k8sVersion: [ "v1.15.12", "v1.16.15", "v1.17.14", "v1.18.12", "v1.19.4" ]
    env:
      DOCKER_BUILDKIT: '1' # Setting DOCKER_BUILDKIT=1 ensures TARGETOS and TARGETARCH are populated
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2.3.4
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.14.4'
    - name: Setup Helm and Socat
      run: |
        curl https://get.helm.sh/helm-v2.17.0-linux-amd64.tar.gz --output helm.tar.gz
        tar -zxvf helm.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        sudo mv linux-amd64/tiller /usr/local/bin/tiller
    
        sudo apt-get update -y && sudo apt-get install -y socat
    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.3.0
      with:
        minikube version: 'v1.17.1'
        kubernetes version: '${{ matrix.k8sVersion }}'
        driver: none # required for nri-kubernetes, as metrics gathered for the host are tested as well
    - name: Compile and Build Image
      run: |
        GOOS=linux GOARCH=amd64 make compile # Set GOOS and GOARCH explicitly since Dockerfile expects them in the binary name
        docker build -t test_image_${{ matrix.privilegedMode }}:test --build-arg 'MODE=${{ matrix.privilegedMode }}' .
    - name: Interact with the cluster
      run: |
        if [ "${{ matrix.privilegedMode }}" = "unprivileged" ]; then
          UNPRIVILEGED=true
        else
          UNPRIVILEGED=false
        fi
        go run e2e/cmd/e2e.go --verbose --cluster_name=e2e --nr_license_key="fakeLicense" --rbac=true --integration_image_tag=test --integration_image_repository=test_image_${{ matrix.privilegedMode }} --k8s_version=${{ matrix.k8sVersion }} --unprivileged=$UNPRIVILEGED
