name: E2E over minikube

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  e2eTests:
    runs-on: ubuntu-18.04
    strategy:
      max-parallel: 6
      matrix:
        privilegedMode: [ "normal", "unprivileged" ]
        k8sVersion: [ "v1.15.12", "v1.16.15", "v1.17.17", "v1.18.16", "v1.19.8", "v1.20.4" ]
    env:
      DOCKER_BUILDKIT: '1' # Setting DOCKER_BUILDKIT=1 ensures TARGETOS and TARGETARCH are populated
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Setup Helm and Socat
        # 2.17.0 is the last version of the 2.x branch, which we require for the e2e scripts
        run: |
          sudo apt-get update -y && sudo apt-get install -y socat
          curl -sSL https://get.helm.sh/helm-v2.17.0-linux-amd64.tar.gz --output helm.tar.gz
          tar -zxvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          sudo mv linux-amd64/tiller /usr/local/bin/tiller
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.1
        with:
          minikube version: v1.19.0
          kubernetes version: ${{ matrix.k8sVersion }}
          driver: none # required for nri-kubernetes, as metrics gathered for the host are tested as well
      - name: Compile and Build Image
        run: |
          GOOS=linux GOARCH=amd64 make compile # Set GOOS and GOARCH explicitly since Dockerfile expects them in the binary name
          docker build -t test_image_${{ matrix.privilegedMode }}:test --build-arg 'MODE=${{ matrix.privilegedMode }}' .
      - name: Interact with the cluster
        continue-on-error: ${{ contains(matrix.k8sVersion, '1.20') }} # experimental support for 1.20.x
        run: |
          if [ "${{ matrix.privilegedMode }}" = "unprivileged" ]; then
            UNPRIVILEGED=true
          else
            UNPRIVILEGED=false
          fi
          go run e2e/cmd/e2e.go --verbose --cluster_name=e2e --nr_license_key="fakeLicense" --rbac=true --integration_image_tag=test --integration_image_repository=test_image_${{ matrix.privilegedMode }} --k8s_version=${{ matrix.k8sVersion }} --unprivileged=$UNPRIVILEGED
